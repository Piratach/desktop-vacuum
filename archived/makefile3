SRC_DIR := src
INC_DIR := include
OBJ_DIR := obj
BIN_DIR := build # or . if you want it in the current directory

CPPFLAGS := -Iinclude -Isrc	-MMD -MP  # -I is a preprocessor flag, not a compiler flag
SFMLFLAGS := -lsfml-graphics -lsfml-window -lsfml-system
CFLAGS   := -Wall              # some warnings about bad code

EXE := $(BIN_DIR)/main

# list of all source files
SRC := $(wildcard $(SRC_DIR)/*.cpp)

# replacing .cpp with .o
OBJ := $(SRC:$(SRC_DIR)/%.cpp=$(OBJ_DIR)/%.o)

CPL := g++ -std=c++17

.PHONY: all

all: $(EXE) 

$(EXE): $(OBJ) | $(BIN_DIR)
	$(CPL) $(SFMLFLAGS) $^ -o $@

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	$(CPL) $(CPPFLAGS) -c $< -o $@

# $(BIN_DIR): 
	# mkdir -p $(BIN_DIR)

# main: main.o scene.o cleanuptools.o directory.o circbutton.o rectbutton.o tab.o
	# g++ -std=c++17 main.o scene.o cleanuptools.o directory.o circbutton.o rectbutton.o tab.o -o main $(LIB) -lstdc++ -lsfml-graphics -lsfml-window -lsfml-system
	# rm -r *.o

# main.o: main.cpp
	# g++ -std=c++17 $(LIB) -c main.cpp

# cleanuptools.o: cleanuptools.hpp cleanuptools.cpp
	# g++ -std=c++17 $(LIB) -c cleanuptools.cpp

# directory.o: directory.cpp directory.hpp
	# g++ -std=c++17 -c directory.cpp

# rectbutton.o: rectbutton.cpp rectbutton.hpp
	# g++ -std=c++17 -c rectbutton.cpp

# circbutton.o: circbutton.hpp circbutton.cpp
	# g++ -std=c++17 -c circbutton.cpp

# tab.o: tab.hpp tab.cpp
	# g++ -std=c++17 -c tab.cpp

# scene.o: scene.hpp src/scene.cpp
	# g++ -std=c++17 -c src/scene.cpp

# makeXML: makeXML.o
	# g++ -std=c++17 makeXML.o -o makeXML -lstdc++ -ltinyxml2
	# rm -r *.o

# makeXML.o: makeXML.cpp
	# g++ -std=c++17 -c makeXML.cpp

# clean:
	# rm -rf main *.o
